import * as ImagePicker from 'expo-image-picker';
import { useRouter } from 'expo-router';
import React, { useState } from 'react';
import {
  Alert,
  Image,
  Keyboard,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View
} from 'react-native';

export default function ProfileScreen() {
  const router = useRouter();
  const [occupation, setOccupation] = useState('');
  const [incomeType, setIncomeType] = useState('‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô');
  const [income, setIncome] = useState('');
  const [statement, setStatement] = useState(null);
  const [idCard, setIdCard] = useState(null);

  const occupations = [
    { id: 'employee', label: '‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£', icon: 'üßëüèª‚Äçüåæ', desc: '‡∏ó‡∏≥‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏£‡∏°' },
    { id: 'business', label: '‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£', icon: 'üè™', desc: '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß' },
    { id: 'freelance', label: '‡∏ü‡∏£‡∏µ‡πÅ‡∏•‡∏ô‡∏ã‡πå', icon: 'üíª', desc: '‡∏á‡∏≤‡∏ô‡∏≠‡∏¥‡∏™‡∏£‡∏∞' },
    { id: 'rider', label: '‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå', icon: 'üõµ', desc: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£' },
    { id: 'other', label: '‡∏≠‡∏∑‡πà‡∏ô ‡πÜ', icon: 'üìã', desc: '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏≠‡∏∑‡πà‡∏ô' }
  ];

  const incomeTypes = ['‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô', '‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå', '‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'];

  const pickImage = async (setter) => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      quality: 1,
    });
    if (!result.canceled) {
      setter(result.assets[0].uri);
    }
  };

  const calculateMonthlyIncome = () => {
    const incomeNum = parseFloat(income);
    if (isNaN(incomeNum) || incomeNum <= 0) return null;
    switch (incomeType) {
      case '‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô': return incomeNum * 30;
      case '‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå': return incomeNum * 4;
      case '‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô': return incomeNum;
      default: return null;
    }
  };

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Progress
  const calculateProgress = () => {
    const totalSteps = 4; // occupation, income, statement, idCard
    let completedSteps = 0;
    
    if (occupation) completedSteps++;
    if (income && calculateMonthlyIncome()) completedSteps++;
    if (statement) completedSteps++;
    if (idCard) completedSteps++;
    
    return (completedSteps / totalSteps) * 100;
  };

  const getProgressStatus = () => {
    const progress = calculateProgress();
    if (progress === 100) return { text: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß', color: '#4CAF50' };
    if (progress >= 75) return { text: '‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!', color: '#ff6600' };
    if (progress >= 50) return { text: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...', color: '#FF9800' };
    return { text: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', color: '#999' };
  };

  const onConfirm = () => {
    Keyboard.dismiss();

    if (!occupation || !income || !statement || !idCard) {
      Alert.alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', '‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
      return;
    }

    const monthly = calculateMonthlyIncome();
    if (monthly === null) {
      Alert.alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }

    router.push({
      pathname: '/dashboard',
      params: {
        occupation,
        income: monthly.toString(),
      },
    });
  };

  const monthlyIncome = calculateMonthlyIncome();
  const progressPercentage = calculateProgress();
  const progressStatus = getProgressStatus();

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.headerSection}>
        <Text style={styles.header}>‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ</Text>
        <Text style={styles.subtitle}>‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ</Text>
      </View>

      <KeyboardAvoidingView
        style={styles.keyboardView}
        behavior={Platform.OS === 'ios' ? 'padding' : undefined}
      >
        <ScrollView
          style={styles.scrollView}
          contentContainerStyle={styles.contentContainer}
          keyboardShouldPersistTaps="handled"
          showsVerticalScrollIndicator={false}
        >
          {/* Progress Card */}
          <View style={styles.progressCard}>
            <View style={styles.progressHeader}>
              <Text style={styles.progressTitle}>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤</Text>
              <Text style={styles.progressPercentage}>{Math.round(progressPercentage)}%</Text>
            </View>
            
            <View style={styles.progressBarContainer}>
              <View style={styles.progressBarBg}>
                <View 
                  style={[
                    styles.progressBarFill, 
                    { 
                      width: `${progressPercentage}%`,
                      backgroundColor: progressStatus.color
                    }
                  ]} 
                />
              </View>
            </View>
            
            <Text style={[styles.progressStatus, { color: progressStatus.color }]}>
              {progressStatus.text}
            </Text>

            {/* Progress Steps Detail */}
            <View style={styles.progressSteps}>
              <View style={styles.progressStep}>
                <View style={[
                  styles.progressStepDot,
                  occupation ? styles.progressStepCompleted : styles.progressStepPending
                ]}>
                  <Text style={styles.progressStepIcon}>
                    {occupation ? '‚úì' : '1'}
                  </Text>
                </View>
                <Text style={styles.progressStepLabel}>‡∏≠‡∏≤‡∏ä‡∏µ‡∏û</Text>
              </View>
              
              <View style={styles.progressStep}>
                <View style={[
                  styles.progressStepDot,
                  (income && monthlyIncome) ? styles.progressStepCompleted : styles.progressStepPending
                ]}>
                  <Text style={styles.progressStepIcon}>
                    {(income && monthlyIncome) ? '‚úì' : '2'}
                  </Text>
                </View>
                <Text style={styles.progressStepLabel}>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ</Text>
              </View>
              
              <View style={styles.progressStep}>
                <View style={[
                  styles.progressStepDot,
                  statement ? styles.progressStepCompleted : styles.progressStepPending
                ]}>
                  <Text style={styles.progressStepIcon}>
                    {statement ? '‚úì' : '3'}
                  </Text>
                </View>
                <Text style={styles.progressStepLabel}>Statement</Text>
              </View>
              
              <View style={styles.progressStep}>
                <View style={[
                  styles.progressStepDot,
                  idCard ? styles.progressStepCompleted : styles.progressStepPending
                ]}>
                  <Text style={styles.progressStepIcon}>
                    {idCard ? '‚úì' : '4'}
                  </Text>
                </View>
                <Text style={styles.progressStepLabel}>‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</Text>
              </View>
            </View>
          </View>

          {/* Occupation Section */}
          <View style={styles.card}>
            <View style={styles.cardHeader}>
              <Text style={styles.cardTitle}>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</Text>
              {occupation && (
                <View style={styles.completedBadge}>
                  <Text style={styles.completedBadgeText}>‚úì ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</Text>
                </View>
              )}
            </View>
            <View style={styles.occupationGrid}>
              {occupations.map((occ) => (
                <TouchableOpacity
                  key={occ.id}
                  style={[
                    styles.occupationCard,
                    occupation === occ.label && styles.occupationCardSelected
                  ]}
                  onPress={() => setOccupation(occ.label)}
                >
                  <Text style={styles.occupationIcon}>{occ.icon}</Text>
                  <Text style={[
                    styles.occupationLabel,
                    occupation === occ.label && styles.occupationLabelSelected
                  ]}>
                    {occ.label}
                  </Text>
                  <Text style={styles.occupationDesc}>{occ.desc}</Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>

          {/* Income Section */}
          <View style={styles.card}>
            <View style={styles.cardHeader}>
              <Text style={styles.cardTitle}>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</Text>
              {(income && monthlyIncome) && (
                <View style={styles.completedBadge}>
                  <Text style={styles.completedBadgeText}>‚úì ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</Text>
                </View>
              )}
            </View>
            
            {/* Income Type Selector */}
            <Text style={styles.inputLabel}>‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ</Text>
            <View style={styles.incomeTypeRow}>
              {incomeTypes.map((type) => (
                <TouchableOpacity
                  key={type}
                  style={[
                    styles.incomeTypeButton,
                    incomeType === type && styles.incomeTypeSelected
                  ]}
                  onPress={() => setIncomeType(type)}
                >
                  <Text style={[
                    styles.incomeTypeText,
                    incomeType === type && styles.incomeTypeTextSelected
                  ]}>
                    {type}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>

            {/* Income Amount Input */}
            <Text style={styles.inputLabel}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</Text>
            <View style={styles.inputContainer}>
              <Text style={styles.currencySymbol}>‡∏ø</Text>
              <TextInput
                style={styles.amountInput}
                placeholder="0"
                keyboardType="numeric"
                value={income}
                onChangeText={setIncome}
                returnKeyType="done"
              />
              <Text style={styles.incomeUnit}>/{incomeType}</Text>
            </View>

            {/* Monthly Income Display */}
            {monthlyIncome && (
              <View style={styles.monthlyIncomeCard}>
                <Text style={styles.monthlyIncomeLabel}>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì</Text>
                <Text style={styles.monthlyIncomeAmount}>
                  ‡∏ø{monthlyIncome.toLocaleString()}
                </Text>
              </View>
            )}
          </View>

          {/* Document Upload Section */}
          <View style={styles.card}>
            <View style={styles.cardHeader}>
              <Text style={styles.cardTitle}>‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö</Text>
              {(statement && idCard) && (
                <View style={styles.completedBadge}>
                  <Text style={styles.completedBadgeText}>‚úì ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</Text>
                </View>
              )}
            </View>
            
            {/* Statement Upload */}
            <View style={styles.uploadSection}>
              <View style={styles.uploadHeader}>
                <Text style={styles.uploadTitle}>üìÑ Statement ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</Text>
                {statement && (
                  <View style={styles.uploadCompletedBadge}>
                    <Text style={styles.uploadCompletedText}>‚úì</Text>
                  </View>
                )}
              </View>
              <Text style={styles.uploadDesc}>‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</Text>
              
              {!statement ? (
                <TouchableOpacity 
                  style={styles.uploadButton}
                  onPress={() => pickImage(setStatement)}
                >
                  <View style={styles.uploadIconContainer}>
                    <Text style={styles.uploadIcon}>üìé</Text>
                  </View>
                  <Text style={styles.uploadButtonText}>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Statement</Text>
                  <Text style={styles.uploadHint}>‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö JPG, PNG, PDF</Text>
                </TouchableOpacity>
              ) : (
                <View style={styles.uploadedFile}>
                  <Image source={{ uri: statement }} style={styles.uploadedImage} />
                  <View style={styles.uploadedInfo}>
                    <Text style={styles.uploadedLabel}>‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß</Text>
                    <TouchableOpacity onPress={() => pickImage(setStatement)}>
                      <Text style={styles.changeFileButton}>‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå</Text>
                    </TouchableOpacity>
                  </View>
                </View>
              )}
            </View>

            {/* ID Card Upload */}
            <View style={styles.uploadSection}>
              <View style={styles.uploadHeader}>
                <Text style={styles.uploadTitle}>üÜî ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</Text>
                {idCard && (
                  <View style={styles.uploadCompletedBadge}>
                    <Text style={styles.uploadCompletedText}>‚úì</Text>
                  </View>
                )}
              </View>
              <Text style={styles.uploadDesc}>‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£</Text>
              
              {!idCard ? (
                <TouchableOpacity 
                  style={styles.uploadButton}
                  onPress={() => pickImage(setIdCard)}
                >
                  <View style={styles.uploadIconContainer}>
                    <Text style={styles.uploadIcon}>üìé</Text>
                  </View>
                  <Text style={styles.uploadButtonText}>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</Text>
                  <Text style={styles.uploadHint}>‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö JPG, PNG</Text>
                </TouchableOpacity>
              ) : (
                <View style={styles.uploadedFile}>
                  <Image source={{ uri: idCard }} style={styles.uploadedImage} />
                  <View style={styles.uploadedInfo}>
                    <Text style={styles.uploadedLabel}>‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß</Text>
                    <TouchableOpacity onPress={() => pickImage(setIdCard)}>
                      <Text style={styles.changeFileButton}>‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå</Text>
                    </TouchableOpacity>
                  </View>
                </View>
              )}
            </View>
          </View>

          <View style={{ height: 100 }} />
        </ScrollView>

        {/* Bottom Button */}
        <View style={styles.bottomContainer}>
          <TouchableOpacity 
            style={[
              styles.confirmButton,
              progressPercentage !== 100 && styles.confirmButtonDisabled
            ]} 
            onPress={onConfirm}
            disabled={progressPercentage !== 100}
          >
            <Text style={styles.confirmButtonText}>
              {progressPercentage === 100 ? '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠' : `‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠ (${Math.round(progressPercentage)}%)`}
            </Text>
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f6fa',
  },
  headerSection: {
    backgroundColor: '#fff',
    padding: 24,
    paddingTop: 50,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
  },
  header: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#ff6600',
    textAlign: 'center',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
  },
  keyboardView: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  contentContainer: {
    padding: 16,
  },
  progressCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 20,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 12,
    elevation: 5,
  },
  progressHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  progressTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
  },
  progressPercentage: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#ff6600',
  },
  progressBarContainer: {
    marginBottom: 12,
  },
  progressBarBg: {
    height: 12,
    backgroundColor: '#e0e0e0',
    borderRadius: 6,
    overflow: 'hidden',
  },
  progressBarFill: {
    height: 12,
    borderRadius: 6,
    transition: 'width 0.3s ease',
  },
  progressStatus: {
    fontSize: 16,
    fontWeight: '600',
    textAlign: 'center',
    marginBottom: 20,
  },
  progressSteps: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: '#f0f0f0',
  },
  progressStep: {
    alignItems: 'center',
    flex: 1,
  },
  progressStepDot: {
    width: 32,
    height: 32,
    borderRadius: 16,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 8,
  },
  progressStepCompleted: {
    backgroundColor: '#4CAF50',
  },
  progressStepPending: {
    backgroundColor: '#e0e0e0',
  },
  progressStepIcon: {
    color: '#fff',
    fontSize: 14,
    fontWeight: 'bold',
  },
  progressStepLabel: {
    fontSize: 12,
    color: '#666',
    textAlign: 'center',
  },
  card: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 20,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 8,
    elevation: 3,
  },
  cardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  cardTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
  },
  completedBadge: {
    backgroundColor: '#e8f5e8',
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 12,
  },
  completedBadgeText: {
    color: '#4CAF50',
    fontSize: 12,
    fontWeight: 'bold',
  },
  occupationGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  occupationCard: {
    width: '48%',
    padding: 16,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#e0e0e0',
    alignItems: 'center',
    marginBottom: 12,
  },
  occupationCardSelected: {
    borderColor: '#ff6600',
    backgroundColor: '#fff5f0',
  },
  occupationIcon: {
    fontSize: 32,
    marginBottom: 8,
  },
  occupationLabel: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
    textAlign: 'center',
    marginBottom: 4,
  },
  occupationLabelSelected: {
    color: '#ff6600',
  },
  occupationDesc: {
    fontSize: 12,
    color: '#999',
    textAlign: 'center',
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 12,
  },
  incomeTypeRow: {
    flexDirection: 'row',
    marginBottom: 20,
  },
  incomeTypeButton: {
    flex: 1,
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    alignItems: 'center',
    marginRight: 8,
  },
  incomeTypeSelected: {
    backgroundColor: '#ff6600',
    borderColor: '#ff6600',
  },
  incomeTypeText: {
    fontSize: 14,
    color: '#666',
  },
  incomeTypeTextSelected: {
    color: '#fff',
    fontWeight: 'bold',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 8,
    backgroundColor: '#fff',
    marginBottom: 16,
  },
  currencySymbol: {
    paddingHorizontal: 16,
    fontSize: 18,
    color: '#666',
    backgroundColor: '#f8f8f8',
    paddingVertical: 16,
    borderTopLeftRadius: 8,
    borderBottomLeftRadius: 8,
  },
  amountInput: {
    flex: 1,
    padding: 16,
    fontSize: 18,
    fontWeight: 'bold',
  },
  incomeUnit: {
    paddingHorizontal: 16,
    fontSize: 14,
    color: '#999',
  },
  monthlyIncomeCard: {
    backgroundColor: '#fff5f0',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
    borderLeftWidth: 4,
    borderLeftColor: '#ff6600',
  },
  monthlyIncomeLabel: {
    fontSize: 14,
    color: '#666',
    marginBottom: 4,
  },
  monthlyIncomeAmount: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#ff6600',
  },
  uploadSection: {
    marginBottom: 24,
  },
  uploadHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 4,
  },
  uploadTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  uploadCompletedBadge: {
    width: 24,
    height: 24,
    borderRadius: 12,
    backgroundColor: '#4CAF50',
    justifyContent: 'center',
    alignItems: 'center',
  },
  uploadCompletedText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: 'bold',
  },
  uploadDesc: {
    fontSize: 14,
    color: '#666',
    marginBottom: 16,
  },
  uploadButton: {
    borderWidth: 2,
    borderColor: '#ff6600',
    borderStyle: 'dashed',
    borderRadius: 12,
    padding: 24,
    alignItems: 'center',
    backgroundColor: '#fff5f0',
  },
  uploadIconContainer: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: '#ff6600',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 12,
  },
  uploadIcon: {
    fontSize: 24,
  },
  uploadButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#ff6600',
    marginBottom: 4,
  },
  uploadHint: {
    fontSize: 12,
    color: '#999',
  },
  uploadedFile: {
    alignItems: 'center',
  },
  uploadedImage: {
    width: 120,
    height: 120,
    borderRadius: 8,
    marginBottom: 12,
  },
  uploadedInfo: {
    alignItems: 'center',
  },
  uploadedLabel: {
    fontSize: 16,
    color: '#4CAF50',
    fontWeight: 'bold',
    marginBottom: 8,
  },
  changeFileButton: {
    fontSize: 14,
    color: '#ff6600',
    textDecorationLine: 'underline',
  },
  bottomContainer: {
    padding: 16,
    backgroundColor: '#fff',
    borderTopWidth: 1,
    borderTopColor: '#f0f0f0',
  },
  confirmButton: {
    backgroundColor: '#ff6600',
    padding: 18,
    borderRadius: 8,
    alignItems: 'center',
  },
  confirmButtonDisabled: {
    backgroundColor: '#ccc',
  },
  confirmButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
});
